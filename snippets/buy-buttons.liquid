{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
BUY BUTTONS
----------------------------------------------------------------------------------------------------------------------

This component is used to show the buy buttons

********************************************
Supported variables
********************************************

* product: the product from which to show the buttons (if empty, a placeholder is displayed)
* show_payment_button: if we show or not the dynamic checkout button
* show_gift_card_recipient: for gift card products, an optional message/email to be sent to the recipient
* atc_button_background: the background of the ATC button
* atc_button_text_color: the color of the ATC button
* payment_button_background: the background of the dynamic payment button
* payment_button_background: the color of the dynamic payment button
* form_id: if specified, define the form ID linked to this input
{%- endcomment -%}

{%- if product != blank -%}
  {%- assign variant_picker_block = section.blocks | where: 'type', 'variant_picker' | first -%}

  {%- assign recipient_feature_active = false -%}

  {%- if product.gift_card? and show_gift_card_recipient -%}
    {%- assign recipient_feature_active = true -%}
    {%- assign show_payment_button = false -%}
  {%- endif -%}

  {%- form 'product', product, is: 'product-form', id: form_id -%}
    <input type="hidden" {% if variant_picker_block != blank %}disabled{% endif %} name="id" value="{{ product.selected_or_first_available_variant.id }}">

    {% liquid
      assign button_disabled = false

      if product.selected_or_first_available_variant.available == false
        assign button_disabled = true
        assign button_content = 'product.general.sold_out_button' | t
      else
        if product.template_suffix contains 'pre-order'
          assign button_content = 'product.general.pre_order_button' | t
        else
          assign button_content = 'product.general.add_to_cart_button' | t
        endif
      endif
    %}

    <div class="v-stack gap-4">
      {%- if recipient_feature_active -%}
        <gift-card-recipient class="gift-card-recipient v-stack gap-3">
          {%- assign checkbox_label = 'gift_card.recipient.checkbox' | t -%}
          {%- render 'checkbox', label: checkbox_label, name: 'properties[__shopify_send_gift_card_to_recipient]' -%}

          <div class="gift-card-recipient__fields js:hidden">
            <div class="fieldset">
              {%- liquid
                assign recipient_email_label = 'gift_card.recipient.email_label' | t
                render 'input', type: 'email', label: recipient_email_label, name: 'properties[Recipient email]', value: form.email, required: true

                assign recipient_name_label = 'gift_card.recipient.name_label' | t
                render 'input', label: recipient_name_label, name: 'properties[Recipient name]', value: form.name

                assign send_on_label = 'gift_card.recipient.send_on_label' | t
                render 'input', type: 'date', label: send_on_label, name: 'properties[Send on]', value: form.send_on, pattern: '\d{4}-\d{2}-\d{2}'
                render 'input', type: 'hidden', name: 'properties[__shopify_offset]'

                assign message_label = 'gift_card.recipient.message_label' | t
                render 'input', label: message_label, name: 'properties[Message]', value: form.message, multiline: 3, maxlength: 200, show_max_characters_count: true
              -%}
            </div>
          </div>
        </gift-card-recipient>
      {%- endif -%}

      <buy-buttons class="buy-buttons buy-buttons-wrapper {% if show_payment_button %}buy-buttons--has-dynamic{% endif %}" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
        <!-- Buy Now Button -->
        <button type="button" class="buy-now-button" {% if button_disabled %}disabled{% endif %} onclick="buyNow('{{ product.selected_or_first_available_variant.id }}')">
          {{ 'product.general.buy_now_button' | t | default: 'Buy Now' }}
        </button>

        <!-- Add to Cart Button -->
        <button type="submit" class="add-to-cart-button" {% if button_disabled %}disabled{% endif %}>
          {{ button_content }}
        </button>
      </buy-buttons>
    </div>
  {%- endform -%}

  <script>
    function buyNow(variantId) {
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1
        })
      })
      .then(response => response.json())
      .then(data => {
        window.location.href = '/checkout';
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }
    
    // Callback Modal
    function openCallbackModal() {
      alert('Request a callback feature will be implemented with a proper modal');
      // You can implement a proper modal here
    }
    
    // Compare functionality
    document.addEventListener('DOMContentLoaded', function() {
      const compareButton = document.querySelector('.compare-button');
      if (compareButton) {
        // Check if product is already in compare list
        const productHandle = compareButton.dataset.productHandle;
        const compareList = JSON.parse(localStorage.getItem('compare') || '[]');
        const buttonText = compareButton.querySelector('span');
        if (compareList.includes(productHandle)) {
          compareButton.classList.add('active');
          if (buttonText) {
            buttonText.textContent = 'Added to Compare';
          }
        }
        
        compareButton.addEventListener('click', function() {
          const compareList = JSON.parse(localStorage.getItem('compare') || '[]');
          const buttonText = this.querySelector('span');
          
          if (!compareList.includes(productHandle)) {
            if (compareList.length >= 4) {
              alert('You can compare up to 4 products at a time');
              return;
            }
            compareList.push(productHandle);
            localStorage.setItem('compare', JSON.stringify(compareList));
            this.classList.add('active');
            if (buttonText) {
              buttonText.textContent = 'Added to Compare';
            }
            updateCompareWidget();
            alert('Product added to compare list');
          } else {
            // Remove from compare
            const index = compareList.indexOf(productHandle);
            compareList.splice(index, 1);
            localStorage.setItem('compare', JSON.stringify(compareList));
            this.classList.remove('active');
            if (buttonText) {
              buttonText.textContent = 'Add to Compare';
            }
            updateCompareWidget();
            alert('Product removed from compare list');
          }
        });
      }
    });
    
    // Update compare widget
    function updateCompareWidget() {
      const compareList = JSON.parse(localStorage.getItem('compare') || '[]');
      const widget = document.getElementById('compare-widget');
      const count = document.getElementById('compare-count');
      
      if (widget && count) {
        if (compareList.length > 0) {
          widget.classList.add('active');
          count.textContent = compareList.length;
        } else {
          widget.classList.remove('active');
        }
      }
    }
  </script>
{%- else -%}
  <buy-buttons class="buy-buttons buy-buttons-wrapper" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
    <button type="button" class="buy-now-button">{{ 'product.general.buy_now_button' | t | default: 'Buy Now' }}</button>
    <button type="submit" class="add-to-cart-button">{{ 'product.general.add_to_cart_button' | t }}</button>
  </buy-buttons>
{%- endif -%}

<!-- Wishlist Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const wishlistButton = document.querySelector('.wishlist-button');
    if (wishlistButton) {
      // Check if product is in wishlist
      const wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
      const productId = wishlistButton.dataset.productId;
      
      if (wishlist.includes(productId)) {
        wishlistButton.classList.add('active');
      }
      
      wishlistButton.addEventListener('click', function() {
        const wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
        const index = wishlist.indexOf(productId);
        
        if (index > -1) {
          wishlist.splice(index, 1);
          this.classList.remove('active');
        } else {
          wishlist.push(productId);
          this.classList.add('active');
        }
        
        localStorage.setItem('wishlist', JSON.stringify(wishlist));
      });
    }
  });
</script>
